distroList <- as.character(myEmails$email)
# Last Week Gross Sales Variance
variance <-  sqlQuery(ch,"Select Variance
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Last week Gross Sales Variance Status
varianceStatus <-  sqlQuery(ch,"Select VarianceStatus
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Email Subject
mysubj <- "Dashboard - Retail Stores"
# Attachment
newpath <- "\\\\stp-file1\\groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Output\\Dashboard - Retail Stores.xlsx"
# Email Body
success <- "The stored procedures have successfully updated data from last week. Verify the data connectors in the Excel file attachment have updated correctly and email to the distribution list."
fail <- "The gross sales variance last week is out of the acceptable range. Verify the stored procedures ran successfuly before you send to the distribution list."
if(variance > -10 && variance < 10) {
successBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"<Variance Status: <strong>", varianceStatus, "</strong><br><br>", success)
# Call function to send email
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = successBody,
test=0)
} else {
failBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", fail)
# Call function to send email
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = failBody,
test=0)
}
#Pause
Sys.sleep(2)
#library(stp)
# Print Some System Info ----
print(  sessionInfo() )
print(R.version)
library(RODBC)
library(stp)
server="sqldw"
database="StpAttribution"
connectionstring=paste( "DRIVER={SQL Server Native Client 11.0};Server=",
server,";Database=",database,";Trusted_Connection=yes",sep="")
ch <- odbcDriverConnect(connectionstring)
# Testing Email
testingEmail <- "jsanchez@sierratradingpost.com"
# Email Distribution List
myEmails <- sqlQuery(ch,"Select email
FROM [StpAttribution].[dbo].[EmailDistributionList]
Where
RetailDashboard=1",stringsAsFactors=F)
distroList <- as.character(myEmails$email)
# Last Week Gross Sales Variance
variance <-  sqlQuery(ch,"Select Variance
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Last week Gross Sales Variance Status
varianceStatus <-  sqlQuery(ch,"Select VarianceStatus
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Email Subject
mysubj <- "Dashboard - Retail Stores"
# Attachment
newpath <- "\\\\stp-file1\\groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Output\\Dashboard - Retail Stores.xlsx"
# Email Body
success <- "The stored procedures have successfully updated data from last week. Verify the data connectors in the Excel file attachment have updated correctly and email to the distribution list."
fail <- "The gross sales variance last week is out of the acceptable range. Verify the stored procedures ran successfuly before you send to the distribution list."
if(variance > -10 && variance < 10) {
successBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", success)
# Call function to send email
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = successBody,
test=0)
} else {
failBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", fail)
# Call function to send email
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = failBody,
test=0)
}
dir
ls
library(jsonlite)
# Run Visual Basic Script to update the Excel file
system(paste0("cscript ",
"\\\\STP-File1\\Groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Code\\Retail_Stores_Automation.vbs"))
#Pause
Sys.sleep(2)
#library(stp)
# Print Some System Info ----
print(  sessionInfo() )
print(R.version)
# Set Database Connections
library(RODBC)
library(stp)
server="sqldw"
database="StpAttribution"
connectionstring=paste( "DRIVER={SQL Server Native Client 11.0};Server=",
server,";Database=",database,";Trusted_Connection=yes",sep="")
ch <- odbcDriverConnect(connectionstring)
# Testing Email
testingEmail <- "jsanchez@sierratradingpost.com"
# Email Distribution List
myEmails <- sqlQuery(ch,"Select email
FROM [StpAttribution].[dbo].[EmailDistributionList]
Where
RetailDashboard=1",stringsAsFactors=F)
distroList <- as.character(myEmails$email)
# Last Week Gross Sales Variance
variance <-  sqlQuery(ch,"Select Variance
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Last week Gross Sales Variance Status
varianceStatus <-  sqlQuery(ch,"Select VarianceStatus
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Email Subject
mysubj <- "Dashboard - Retail Stores"
# Attachment
newpath <- "\\\\stp-file1\\groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Output\\Dashboard - Retail Stores.xlsx"
# Email Body
success <- "The stored procedures have successfully updated data from last week. Verify the data connectors in the Excel file attachment have updated correctly and email to the distribution list."
fail <- "The gross sales variance last week is out of the acceptable range. Verify the stored procedures ran successfuly before you send to the distribution list."
# Call function to send email
# If Gross Sales Variance is within +- 10% then send success email, otherwise send fail email.
if(variance > -10 && variance < 10) {
successBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", success)
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = successBody,
test=0)
} else {
failBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", fail)
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = failBody,
test=0)
}
# Save a copy for historical purposes
historyfile  <- paste0("\\\\stp-file1\\groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Output\\ReportHistory\\Dashboard - Retail Stores ",as.character(format(Sys.Date(),"%Y%m%d")) ,".xlsx")
file.copy(from=newpath,to=historyfile)
# Run Visual Basic Script to update the Excel file
system(paste0("cscript ",
"\\\\STP-File1\\Groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Code\\Retail_Stores_Automation.vbs"))
#Pause
Sys.sleep(2)
#library(stp)
# Print Some System Info ----
print(  sessionInfo() )
print(R.version)
# Set Database Connections
library(RODBC)
library(stp)
server="sqldw"
database="StpAttribution"
connectionstring=paste( "DRIVER={SQL Server Native Client 11.0};Server=",
server,";Database=",database,";Trusted_Connection=yes",sep="")
ch <- odbcDriverConnect(connectionstring)
# Testing Email
testingEmail <- "jsanchez@sierratradingpost.com"
# Email Distribution List
myEmails <- sqlQuery(ch,"Select email
FROM [StpAttribution].[dbo].[EmailDistributionList]
Where
RetailDashboard=1",stringsAsFactors=F)
distroList <- as.character(myEmails$email)
# Last Week Gross Sales Variance
variance <-  sqlQuery(ch,"Select Variance
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Last week Gross Sales Variance Status
varianceStatus <-  sqlQuery(ch,"Select VarianceStatus
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Email Subject
mysubj <- "Dashboard - Retail Stores"
# Attachment
newpath <- "\\\\stp-file1\\groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Output\\Dashboard - Retail Stores.xlsx"
# Email Body
success <- "The stored procedures have successfully updated data from last week. Verify the data connectors in the Excel file attachment have updated correctly and email to the distribution list."
fail <- "The gross sales variance last week is out of the acceptable range. Verify the stored procedures ran successfuly before you send to the distribution list."
# Call function to send email
# If Gross Sales Variance is within +- 10% then send success email, otherwise send fail email.
if(variance > -10 && variance < 10) {
successBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", success)
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = successBody,
test=0)
} else {
failBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", fail)
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = failBody,
test=0)
}
# Save a copy for historical purposes
historyfile  <- paste0("\\\\stp-file1\\groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Output\\ReportHistory\\Dashboard - Retail Stores ",as.character(format(Sys.Date(),"%Y%m%d")) ,".xlsx")
file.copy(from=newpath,to=historyfile)
# Run Visual Basic Script to update the Excel file
system(paste0("cscript ",
"\\\\STP-File1\\Groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Code\\Retail_Stores_Automation.vbs"))
#Pause
Sys.sleep(2)
#library(stp)
# Print Some System Info ----
print(  sessionInfo() )
print(R.version)
# Set Database Connections
library(RODBC)
library(stp)
server="sqldw"
database="StpAttribution"
connectionstring=paste( "DRIVER={SQL Server Native Client 11.0};Server=",
server,";Database=",database,";Trusted_Connection=yes",sep="")
ch <- odbcDriverConnect(connectionstring)
# Testing Email
testingEmail <- "jsanchez@sierratradingpost.com"
# Email Distribution List
myEmails <- sqlQuery(ch,"Select email
FROM [StpAttribution].[dbo].[EmailDistributionList]
Where
RetailDashboard=1",stringsAsFactors=F)
distroList <- as.character(myEmails$email)
# Last Week Gross Sales Variance
variance <-  sqlQuery(ch,"Select Variance
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Last week Gross Sales Variance Status
varianceStatus <-  sqlQuery(ch,"Select VarianceStatus
FROM [SqlOds].[Stp_Ods_Dev].[dbo].[RetailDashboardValidationCurrentFWSalesVariance]",stringsAsFactors=F)
# Email Subject
mysubj <- "Dashboard - Retail Stores"
# Attachment
newpath <- "\\\\stp-file1\\groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Output\\Dashboard - Retail Stores.xlsx"
# Email Body
success <- "The stored procedures have successfully updated data from last week. Verify the data connectors in the Excel file attachment have updated correctly and email to the distribution list."
fail <- "The gross sales variance last week is out of the acceptable range. Verify the stored procedures ran successfuly before you send to the distribution list."
# Call function to send email
# If Gross Sales Variance is within +- 10% then send success email, otherwise send fail email.
if(variance > -10 && variance < 10) {
successBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", success)
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = successBody,
test=0)
} else {
failBody <-
paste("Gross Sales Variance from last week: <strong>" , variance, "%</strong><br><br>",
"Variance Status: <strong>", varianceStatus, "</strong><br><br>", fail)
psSendMail(subject = mysubj,
attachments=newpath,
to = distroList,
BodyAsHtml = failBody,
test=0)
}
# Save a copy for historical purposes
historyfile  <- paste0("\\\\stp-file1\\groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Output\\ReportHistory\\Dashboard - Retail Stores ",as.character(format(Sys.Date(),"%Y%m%d")) ,".xlsx")
file.copy(from=newpath,to=historyfile)
# Run Visual Basic Script to update the Excel file
system(paste0("cscript ",
"\\\\STP-File1\\Groups\\DataScience\\Reports\\CoreDashboards\\RetailStores\\Code\\Retail_Stores_Automation.vbs"))
library(tidyverse)
install.packages("tidyverse")
?regex
Sys.Date()
Sys.Time()
Sys.time()
class(Sys.time())
install.packages("igraph")
head(friends)
# Load igraph
library(igraph)
head(friends)
# Load tidyvers
library(tidyverse)
name1 = c("Jessie", "Jessie", "Sidney", "Sidney", "Karl", "Sidney", "Britt", "Shayne",
"Sidney", "Sidney", "Jessie", "Donnie", "Sidney", "Rene", "Shayne", "Jessie",
"Rene", "Elisha", "Eugene", "Berry", "Odell", "Odell", "Britt", "Elisha", "Lacy", "Britt", "Karl")
name2 = c("Sidney", "Britt", "Britt", "Donnie", "Berry", "Rene", "Rene", "Sidney", "Elisha"
"Whitney", "Whitney", "Odell", "Odell", "Whitney", "Donnie", "Lacy", "Lacy", "Eugene",
"Jude", "Odell", "Rickie", "Karl", "Lacy", "Jude", "Whitney", "Whitney", "Tommy")
name2 = c("Sidney", "Britt", "Britt", "Donnie", "Berry", "Rene", "Rene", "Sidney", "Elisha"
"Whitney", "Whitney", "Odell", "Odell", "Whitney", "Donnie", "Lacy", "Lacy", "Eugene",
"Jude", "Odell", "Rickie", "Karl", "Lacy", "Jude", "Whitney", "Whitney", "Tommy")
name2 = c("Sidney", "Britt", "Britt", "Donnie", "Berry", "Rene", "Rene", "Sidney", "Elisha"
"Whitney", "Whitney", "Odell", "Odell", "Whitney", "Donnie", "Lacy", "Lacy", "Eugene","Jude", "Odell", "Rickie", "Karl", "Lacy", "Jude", "Whitney", "Whitney", "Tommy")
name2 = c("Sidney", "Britt", "Britt", "Donnie", "Berry", "Rene", "Rene", "Sidney", "Elisha"
"Whitney", "Whitney", "Odell", "Odell", "Whitney", "Donnie", "Lacy", "Lacy", "Eugene",
"Jude", "Odell", "Rickie", "Karl", "Lacy", "Jude", "Whitney", "Whitney", "Tommy")
name1 = c("Jessie", "Jessie", "Sidney", "Sidney", "Karl", "Sidney", "Britt", "Shayne",
"Sidney", "Sidney", "Jessie", "Donnie", "Sidney", "Rene", "Shayne", "Jessie",
"Rene", "Elisha", "Eugene", "Berry", "Odell", "Odell", "Britt", "Elisha", "Lacy", "Britt", "Karl")
name2 = c("Sidney", "Britt", "Britt", "Donnie", "Berry", "Rene", "Rene", "Sidney", "Elisha",
"Whitney", "Whitney", "Odell", "Odell", "Whitney", "Donnie", "Lacy", "Lacy", "Eugene",
"Jude", "Odell", "Rickie", "Karl", "Lacy", "Jude", "Whitney", "Whitney", "Tommy")
tibble(
name1,
name2
)
friends <-tibble(
name1,
name2
)
friends
View(friends)
# Convert friends dataframe to a matrix
friends.mat <- as.matrix(friends)
# Convert friends matrix to an igraph object
g <- graph.edgelist(friends, directed = FALSE)
# Convert friends dataframe to a matrix
friends.mat <- as.matrix(friends)
# Convert friends matrix to an igraph object
g <- graph.edgelist(friends, directed = FALSE)
View(friends.mat)
friends <- data.frame(
name1,
name2
)
# Convert friends dataframe to a matrix
friends.mat <- as.matrix(friends)
# Convert friends matrix to an igraph object
g <- graph.edgelist(friends, directed = FALSE)
# Make a very basic plot of the network
plot(g)
# Convert friends matrix to an igraph object
g <- graph.edgelist(friends, directed = FALSE)
# Convert friends dataframe to a matrix
friends.mat <- as.matrix(friends)
# Convert friends matrix to an igraph object
g <- graph.edgelist(friends.mat, directed = FALSE)
# Make a very basic plot of the network
plot(g)
friends <- tibble(
name1,
name2
)
# Convert friends dataframe to a matrix
friends.mat <- as.matrix(friends)
# Convert friends matrix to an igraph object
g <- graph.edgelist(friends.mat, directed = FALSE)
# Make a very basic plot of the network
plot(g)
# Subset vertices and edges
V(g)
E(g)
# Count number of edges
gsize(g)
# Count number of vertices
gorder(g)
# Create vertex attributes
genders <- c("M", "F", "F", "M", "M", "M", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M")
ages <- c(18, 19, 21, 20, 22, 18, 23, 21, 22, 20, 20, 22, 21, 18, 19, 20)
# Inspect the objects 'genders' and 'ages'
genders
ages
# Create new vertex attribute called 'gender'
g <- set_vertex_attr(g, "gender", value = genders)
# Create new vertex attribute called 'age'
g <- set_vertex_attr(g, "age", value = ages)
# View all vertex attributes in a list
vertex_attr(g)
# View attributes of first five vertices in a dataframe
V(g)[[1:5]]
# Create edge attribute
hours <- c(1, 2, 2, 1, 2, 5, 5, 1, 1, 3, 2, 1, 1, 5, 1, 2, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 4)
# Create new edge attribute called 'hours'
g <- set_edge_attr(g, "hours", value = hours)
# View edge attributes of graph object
edge_attr(g)
# Find all edges that include "Britt"
E(g)[[inc('Britt')]]
# Find all pairs that spend 4 or more hours together per week
E(g)[[hours >= 4]]
# Create the friends1_edges tibble
friends1_edges <- tibble(
name1,
name2,
hours
)
View(friends1_edges)
# Creating the friends1_edges tibble
name1_25 <- c("Joe", "Joe", "Joe", "Erin", "Kelley", "Ronald", "Ronald", "Ronald",
"Michael", "Michael", "Michael", "Valentine", "Troy", "Troy", "Jasmine", "Jasmine",
"Juan", "Carey", "Frankie", "Frankie", "Michael", "Michael", "Keith", "Keith", "Gregory")
name2_25 <- c("Ronald", "Michael", "Troy", "Kelley", "Valentine", "Troy", "Perry", "Jasmine", "Troy",
"Jasmine", "Juan", "Perry", "Jasmine", "Juan", "Juan", "Carey", "Demetrius", "Frankie",
"Michael", "Merle", "Merle", "Alex", "Gregory", "Marion", "Marion")
hours_25 <- c(1, 3, 2, 3, 5, 1, 3, 5, 2, 1, 3, 5, 3, 2, 6, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2)
friends1_edges <- tibble(name1_25, name2_25, hours_25)
View(friends1_edges)
?tibble
# Creating the friends1_edges tibble
name1 <- c("Joe", "Joe", "Joe", "Erin", "Kelley", "Ronald", "Ronald", "Ronald",
"Michael", "Michael", "Michael", "Valentine", "Troy", "Troy", "Jasmine", "Jasmine",
"Juan", "Carey", "Frankie", "Frankie", "Michael", "Michael", "Keith", "Keith", "Gregory")
name2 <- c("Ronald", "Michael", "Troy", "Kelley", "Valentine", "Troy", "Perry", "Jasmine", "Troy",
"Jasmine", "Juan", "Perry", "Jasmine", "Juan", "Juan", "Carey", "Demetrius", "Frankie",
"Michael", "Merle", "Merle", "Alex", "Gregory", "Marion", "Marion")
hours<- c(1, 3, 2, 3, 5, 1, 3, 5, 2, 1, 3, 5, 3, 2, 6, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2)
friends1_edges <- tibble(name1_25, name2_25, hours_25)
friends1_edges <- tibble(name1, name2, hours)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
View(friends1_edges)
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "F", "M", "M", "M", "M", "M",
"M", "M", "F", "F")
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M", "M", "M", "M",
"M", "M", "F", "F")
friends1_nodes <- tibble(name, gender)
# Create the friends1_nodes tibble
name <- c("Joe", "Erin", "Kelley", "Ronald", "Michael", "Valentine", "Troy", "Jasmine",
"Juan", "Carey", "Frankie", "Michael", "Keith", "Gregory", "Perry", "Demetrius",
"Merle", "Alex", "Marion")
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M", "M", "M", "M",
"M", "M", "F", "F")
friends1_nodes <- tibble(name, gender)
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
View(friends1_nodes)
# Create the friends1_nodes tibble
name <- c("Joe", "Erin", "Kelley", "Ronald", "Michael", "Valentine", "Troy", "Jasmine",
"Juan", "Carey", "Frankie", "Keith", "Gregory", "Perry", "Demetrius",
"Merle", "Alex", "Marion")
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M", "M", "M",
"M", "M", "F", "F")
friends1_nodes <- tibble(name, gender)
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Subset edges greater than or equal to 5 hours
E(g1)[[hours >= 5]]
# Set vertex color by gender
V(g1)$color <- ifelse(V(g1)$gender == "F", "orange", "dodgerblue")
# Plot the graph
plot(g1, vertex.label.color = "black")
# Load tidyvers
library(tidyverse)
# Load igraph
library(igraph)
# Create the friends1_edges tibble
name1_25 <- c("Joe", "Joe", "Joe", "Erin", "Kelley", "Ronald", "Ronald", "Ronald",
"Michael", "Michael", "Michael", "Valentine", "Troy", "Troy", "Jasmine", "Jasmine",
"Juan", "Carey", "Frankie", "Frankie", "Michael", "Michael", "Keith", "Keith", "Gregory")
name2_25 <- c("Ronald", "Michael", "Troy", "Kelley", "Valentine", "Troy", "Perry", "Jasmine", "Troy",
"Jasmine", "Juan", "Perry", "Jasmine", "Juan", "Juan", "Carey", "Demetrius", "Frankie",
"Michael", "Merle", "Merle", "Alex", "Gregory", "Marion", "Marion")
hours_25 <- c(1, 3, 2, 3, 5, 1, 3, 5, 2, 1, 3, 5, 3, 2, 6, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
# Create the friends1_nodes tibble
name <- c("Joe", "Erin", "Kelley", "Ronald", "Michael", "Valentine", "Troy", "Jasmine",
"Juan", "Carey", "Frankie", "Keith", "Gregory", "Perry", "Demetrius",
"Merle", "Alex", "Marion")
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M", "M", "M",
"M", "M", "F", "F")
friends1_nodes <- tibble(name, gender)
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Subset edges greater than or equal to 5 hours
E(g1)[[hours >= 5]]
# Set vertex color by gender
# "orange" for females and "dodgerblue" for males
V(g1)$color <- ifelse(V(g1)$gender == "F", "orange", "dodgerblue")
# Plot the graph
plot(g1, vertex.label.color = "black")
View(g1)
g1
# Plot the graph object g1 in a circle layout
plot(g1, vertex.label.color = "black", layout = layout_in_circle(g1))
# Plot the graph object g1 in a Fruchterman-Reingold layout
plot(g1, vertex.label.color = "black", layout = layout_with_fr(g1))
# Plot the graph object g1 in a Tree layout
m <- layout_as_tree(g1)
plot(g1, vertex.label.color = "black", layout = m)
# Plot the graph object g1 using igraph's chosen layout
m1 <- layout_nicely(g1)
plot(g1, vertex.label.color = "black", layout = m1)
plot(g1, vertex.label.color = "black", layout = m)
plot(g1, vertex.label.color = "black", layout = m1)
plot(g1, vertex.label.color = "black", layout = m)
setwd("E:/JS/Courses/Analyzing Networks with R/Predictive Analytics using Networked Data in R/network-predictive-analytics")
load("E:/JS/Courses/Analyzing Networks with R/Predictive Analytics using Networked Data in R/network-predictive-analytics/data/StudentCustomers.RData")
load("E:/JS/Courses/Analyzing Networks with R/Predictive Analytics using Networked Data in R/network-predictive-analytics/data/StudentEdgelist.RData")
load("E:/JS/Courses/Analyzing Networks with R/Predictive Analytics using Networked Data in R/network-predictive-analytics/data/StudentNetwork.RData")
load("E:/JS/Courses/Analyzing Networks with R/Predictive Analytics using Networked Data in R/network-predictive-analytics/data/StudentNetwork.RData")
load("E:/JS/Courses/Analyzing Networks with R/Predictive Analytics using Networked Data in R/network-predictive-analytics/data/StudentEdgelist.RData")
load("E:/JS/Courses/Analyzing Networks with R/Predictive Analytics using Networked Data in R/network-predictive-analytics/data/StudentCustomers.RData")
install.packages("corrplot")
